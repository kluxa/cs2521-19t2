
A tour on a graph is a path that visits all vertices of the graph.

Your task is to implement the function getTour which, given a graph,
returns a tour and sets *tourLength to the length of the tour. Since
there are infinitely many such paths, you can return any one.

Assumptions/Clarifications:

- Your tour can start and finish at any vertex,  and you can visit
  vertices more than once.

- You can assume the graph is connected, and contains at least two
  vertices.

- Since you need to return an array, the array must be dynamically
  allocated.

- The tour can be as long or as short as you want. It can continue
  visiting vertices even if it has already visited all vertices.

- No vertex is connected to itself.

EXAMPLE

Suppose you are given this graph:

  0 ----- 1 ----- 2 ----- 3
          |       |
          |       |
          |       |
          4 ----- 5

This graph would be represented by the adjacency matrix:

 0 1 0 0 0 0
 1 0 1 0 1 0
 0 1 0 1 0 1
 0 0 1 0 0 0
 0 1 0 0 0 1
 0 0 1 0 1 0

These are some examples of valid tours:

 0 1 4 5 2 3       (length = 6)

 0 1 2 3 2 5 4     (length = 7)

 1 4 5 2 3 2 1 0   (length = 8)
 
 4 5 2 3 2 1 0 1 4 (length = 9)

These are some examples of invalid tours:

 0 1 2 3        - does not visit 4 or 5
 
 0 1 2 3 4 5    - there is no edge from 3 to 4

 0 1 1 4 5 2 3  - there is no edge from 1 to itself

 0 1 2 3 4 5 6  - 6 is not a valid vertex


THE FILES

Graph.h  and  Graph.c contain, respectively, the interface and
implementation  of an undirected graph ADT, using an adjacency
matrix representation.

getTour, the function you must implement, is in getTour.c. You
may  add additional helper functions, but be sure to make them
static.


TESTING

There  are  some simple tests in testGetTour.c. You should add
your own tests.

To compile and run the tests, run make and then ./testGetTour.

