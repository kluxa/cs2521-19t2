
Assume A is an array containing the coefficients [a_0, a_1, ... , a_n].

-- First attempt --

We compute each term of the polynomial one by one and add all the terms
to a running sum.

sum = 0
for i = 0..n do
	sum += A[i] * power(x, i)
end for

procedure power(x, i):
	result = 1
	for j = 0..(i - 1) do
		result *= x           <<<
	end for
	return result

Let's look at how many times the line I've marked with <<< runs. When i
is 0, it does not run. When i is 1, it runs once. When i is n, it runs
n times. So in total, it runs 0 + 1 + ... + n times, which is equal
to n(n + 1)/2. This makes our algorithm O(n^2).

The problem with our algorithm is that we are unnecessarily repeating a
lot of computation.  For example, when we compute x^n, we multiply x by
itself n times, but when we computed x^(n-1), we multiplied x by itself
n - 1 times, so why do we have to start from scratch every time we
compute a new power of x?

-- Second attempt --

We can improve on our first attempt by having an array which stores the
powers of x, which we can compute in O(n) time.

power = 1
for i = 0..n do            |
	powers[i] = power      | > these lines run n times
	power *= x             |
end for

sum = 0
for i = 0..n do            |
	sum += A[i] * power[i] | > these lines run n times
end for

Both parts of the algorithm run in O(n) time,  so overall our algorithm
is O(n).

-- Further improved --

We don't actually need an array to store the powers of x -  whenever we
compute a new power of x, we can immediately multiply it by the
corresponding coefficient and add it to the sum.

This doesn't change the time complexity, but saves on space.

power = 1
sum = 0
for i = 0..n do
	sum += A[i] * power
	power *= x
end for
